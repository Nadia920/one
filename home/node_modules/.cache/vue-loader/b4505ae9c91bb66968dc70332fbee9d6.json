{"remainingRequest":"D:\\документы\\GitHub\\one\\home\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\документы\\GitHub\\one\\home\\src\\components\\ArticleList.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\документы\\GitHub\\one\\home\\src\\components\\ArticleList.vue","mtime":1626212836000},{"path":"D:\\документы\\GitHub\\one\\home\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680503952892},{"path":"D:\\документы\\GitHub\\one\\home\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1680504144232},{"path":"D:\\документы\\GitHub\\one\\home\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680503952892},{"path":"D:\\документы\\GitHub\\one\\home\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1680504319910}],"contextDependencies":[],"result":["\nimport { mapGetters } from \"vuex\";\nimport RwvArticlePreview from \"./VArticlePreview\";\nimport VPagination from \"./VPagination\";\nimport { FETCH_ARTICLES } from \"../store/actions.type\";\n\nexport default {\n  name: \"RwvArticleList\",\n  components: {\n    RwvArticlePreview,\n    VPagination\n  },\n  props: {\n    type: {\n      type: String,\n      required: false,\n      default: \"all\"\n    },\n    author: {\n      type: String,\n      required: false\n    },\n    tag: {\n      type: String,\n      required: false\n    },\n    favorited: {\n      type: String,\n      required: false\n    },\n    itemsPerPage: {\n      type: Number,\n      required: false,\n      default: 10\n    }\n  },\n  data() {\n    return {\n      currentPage: 1\n    };\n  },\n  computed: {\n    listConfig() {\n      const { type } = this;\n      const filters = {\n        offset: (this.currentPage - 1) * this.itemsPerPage,\n        limit: this.itemsPerPage\n      };\n      if (this.author) {\n        filters.author = this.author;\n      }\n      if (this.tag) {\n        filters.tag = this.tag;\n      }\n      if (this.favorited) {\n        filters.favorited = this.favorited;\n      }\n      return {\n        type,\n        filters\n      };\n    },\n    pages() {\n      if (this.isLoading || this.articlesCount <= this.itemsPerPage) {\n        return [];\n      }\n      return [\n        ...Array(Math.ceil(this.articlesCount / this.itemsPerPage)).keys()\n      ].map(e => e + 1);\n    },\n    ...mapGetters([\"articlesCount\", \"isLoading\", \"articles\"])\n  },\n  watch: {\n    currentPage(newValue) {\n      this.listConfig.filters.offset = (newValue - 1) * this.itemsPerPage;\n      this.fetchArticles();\n    },\n    type() {\n      this.resetPagination();\n      this.fetchArticles();\n    },\n    author() {\n      this.resetPagination();\n      this.fetchArticles();\n    },\n    tag() {\n      this.resetPagination();\n      this.fetchArticles();\n    },\n    favorited() {\n      this.resetPagination();\n      this.fetchArticles();\n    }\n  },\n  mounted() {\n    this.fetchArticles();\n  },\n  methods: {\n    fetchArticles() {\n      this.$store.dispatch(FETCH_ARTICLES, this.listConfig);\n    },\n    resetPagination() {\n      this.listConfig.offset = 0;\n      this.currentPage = 1;\n    }\n  }\n};\n",{"version":3,"sources":["ArticleList.vue"],"names":[],"mappings":";AAkfile":"ArticleList.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div v-if=\"isLoading\" class=\"article-preview\">Loading articles...</div>\n    <div v-else>\n      <div v-if=\"articles.length === 0\" class=\"article-preview\">\n        No articles are here... yet.\n      </div>\n      <RwvArticlePreview\n        v-for=\"(article, index) in articles\"\n        :article=\"article\"\n        :key=\"article.title + index\"\n      />\n      <VPagination :pages=\"pages\" :currentPage.sync=\"currentPage\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from \"vuex\";\nimport RwvArticlePreview from \"./VArticlePreview\";\nimport VPagination from \"./VPagination\";\nimport { FETCH_ARTICLES } from \"../store/actions.type\";\n\nexport default {\n  name: \"RwvArticleList\",\n  components: {\n    RwvArticlePreview,\n    VPagination\n  },\n  props: {\n    type: {\n      type: String,\n      required: false,\n      default: \"all\"\n    },\n    author: {\n      type: String,\n      required: false\n    },\n    tag: {\n      type: String,\n      required: false\n    },\n    favorited: {\n      type: String,\n      required: false\n    },\n    itemsPerPage: {\n      type: Number,\n      required: false,\n      default: 10\n    }\n  },\n  data() {\n    return {\n      currentPage: 1\n    };\n  },\n  computed: {\n    listConfig() {\n      const { type } = this;\n      const filters = {\n        offset: (this.currentPage - 1) * this.itemsPerPage,\n        limit: this.itemsPerPage\n      };\n      if (this.author) {\n        filters.author = this.author;\n      }\n      if (this.tag) {\n        filters.tag = this.tag;\n      }\n      if (this.favorited) {\n        filters.favorited = this.favorited;\n      }\n      return {\n        type,\n        filters\n      };\n    },\n    pages() {\n      if (this.isLoading || this.articlesCount <= this.itemsPerPage) {\n        return [];\n      }\n      return [\n        ...Array(Math.ceil(this.articlesCount / this.itemsPerPage)).keys()\n      ].map(e => e + 1);\n    },\n    ...mapGetters([\"articlesCount\", \"isLoading\", \"articles\"])\n  },\n  watch: {\n    currentPage(newValue) {\n      this.listConfig.filters.offset = (newValue - 1) * this.itemsPerPage;\n      this.fetchArticles();\n    },\n    type() {\n      this.resetPagination();\n      this.fetchArticles();\n    },\n    author() {\n      this.resetPagination();\n      this.fetchArticles();\n    },\n    tag() {\n      this.resetPagination();\n      this.fetchArticles();\n    },\n    favorited() {\n      this.resetPagination();\n      this.fetchArticles();\n    }\n  },\n  mounted() {\n    this.fetchArticles();\n  },\n  methods: {\n    fetchArticles() {\n      this.$store.dispatch(FETCH_ARTICLES, this.listConfig);\n    },\n    resetPagination() {\n      this.listConfig.offset = 0;\n      this.currentPage = 1;\n    }\n  }\n};\n</script>\n"]}]}