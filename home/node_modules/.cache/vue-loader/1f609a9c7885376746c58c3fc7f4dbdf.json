{"remainingRequest":"D:\\документы\\GitHub\\one\\home\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\документы\\GitHub\\one\\home\\src\\views\\ArticleEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\документы\\GitHub\\one\\home\\src\\views\\ArticleEdit.vue","mtime":1626212836000},{"path":"D:\\документы\\GitHub\\one\\home\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680503952892},{"path":"D:\\документы\\GitHub\\one\\home\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1680504144232},{"path":"D:\\документы\\GitHub\\one\\home\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680503952892},{"path":"D:\\документы\\GitHub\\one\\home\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1680504319910}],"contextDependencies":[],"result":["\nimport { mapGetters } from \"vuex\";\nimport store from \"@/store\";\nimport RwvListErrors from \"@/components/ListErrors\";\nimport {\n  ARTICLE_PUBLISH,\n  ARTICLE_EDIT,\n  FETCH_ARTICLE,\n  ARTICLE_EDIT_ADD_TAG,\n  ARTICLE_EDIT_REMOVE_TAG,\n  ARTICLE_RESET_STATE\n} from \"@/store/actions.type\";\n\nexport default {\n  name: \"RwvArticleEdit\",\n  components: { RwvListErrors },\n  props: {\n    previousArticle: {\n      type: Object,\n      required: false\n    }\n  },\n  async beforeRouteUpdate(to, from, next) {\n    // Reset state if user goes from /editor/:id to /editor\n    // The component is not recreated so we use to hook to reset the state.\n    await store.dispatch(ARTICLE_RESET_STATE);\n    return next();\n  },\n  async beforeRouteEnter(to, from, next) {\n    // SO: https://github.com/vuejs/vue-router/issues/1034\n    // If we arrive directly to this url, we need to fetch the article\n    await store.dispatch(ARTICLE_RESET_STATE);\n    if (to.params.slug !== undefined) {\n      await store.dispatch(\n        FETCH_ARTICLE,\n        to.params.slug,\n        to.params.previousArticle\n      );\n    }\n    return next();\n  },\n  async beforeRouteLeave(to, from, next) {\n    await store.dispatch(ARTICLE_RESET_STATE);\n    next();\n  },\n  data() {\n    return {\n      tagInput: null,\n      inProgress: false,\n      errors: {}\n    };\n  },\n  computed: {\n    ...mapGetters([\"article\"])\n  },\n  methods: {\n    onPublish(slug) {\n      let action = slug ? ARTICLE_EDIT : ARTICLE_PUBLISH;\n      this.inProgress = true;\n      this.$store\n        .dispatch(action)\n        .then(({ data }) => {\n          this.inProgress = false;\n          this.$router.push({\n            name: \"article\",\n            params: { slug: data.article.slug }\n          });\n        })\n        .catch(({ response }) => {\n          this.inProgress = false;\n          this.errors = response.data.errors;\n        });\n    },\n    removeTag(tag) {\n      this.$store.dispatch(ARTICLE_EDIT_REMOVE_TAG, tag);\n    },\n    addTag(tag) {\n      this.$store.dispatch(ARTICLE_EDIT_ADD_TAG, tag);\n      this.tagInput = null;\n    }\n  }\n};\n",{"version":3,"sources":["ArticleEdit.vue"],"names":[],"mappings":";AAoEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ArticleEdit.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"editor-page\">\n    <div class=\"container page\">\n      <div class=\"row\">\n        <div class=\"col-md-10 offset-md-1 col-xs-12\">\n          <RwvListErrors :errors=\"errors\" />\n          <form @submit.prevent=\"onPublish(article.slug)\">\n            <fieldset :disabled=\"inProgress\">\n              <fieldset class=\"form-group\">\n                <input\n                  type=\"text\"\n                  class=\"form-control form-control-lg\"\n                  v-model=\"article.title\"\n                  placeholder=\"Article Title\"\n                />\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  v-model=\"article.description\"\n                  placeholder=\"What's this article about?\"\n                />\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <textarea\n                  class=\"form-control\"\n                  rows=\"8\"\n                  v-model=\"article.body\"\n                  placeholder=\"Write your article (in markdown)\"\n                >\n                </textarea>\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"Enter tags\"\n                  v-model=\"tagInput\"\n                  @keypress.enter.prevent=\"addTag(tagInput)\"\n                />\n                <div class=\"tag-list\">\n                  <span\n                    class=\"tag-default tag-pill\"\n                    v-for=\"(tag, index) of article.tagList\"\n                    :key=\"tag + index\"\n                  >\n                    <i class=\"ion-close-round\" @click=\"removeTag(tag)\"> </i>\n                    {{ tag }}\n                  </span>\n                </div>\n              </fieldset>\n            </fieldset>\n            <button\n              :disabled=\"inProgress\"\n              class=\"btn btn-lg pull-xs-right btn-primary\"\n              type=\"submit\"\n            >\n              Publish Article\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from \"vuex\";\nimport store from \"@/store\";\nimport RwvListErrors from \"@/components/ListErrors\";\nimport {\n  ARTICLE_PUBLISH,\n  ARTICLE_EDIT,\n  FETCH_ARTICLE,\n  ARTICLE_EDIT_ADD_TAG,\n  ARTICLE_EDIT_REMOVE_TAG,\n  ARTICLE_RESET_STATE\n} from \"@/store/actions.type\";\n\nexport default {\n  name: \"RwvArticleEdit\",\n  components: { RwvListErrors },\n  props: {\n    previousArticle: {\n      type: Object,\n      required: false\n    }\n  },\n  async beforeRouteUpdate(to, from, next) {\n    // Reset state if user goes from /editor/:id to /editor\n    // The component is not recreated so we use to hook to reset the state.\n    await store.dispatch(ARTICLE_RESET_STATE);\n    return next();\n  },\n  async beforeRouteEnter(to, from, next) {\n    // SO: https://github.com/vuejs/vue-router/issues/1034\n    // If we arrive directly to this url, we need to fetch the article\n    await store.dispatch(ARTICLE_RESET_STATE);\n    if (to.params.slug !== undefined) {\n      await store.dispatch(\n        FETCH_ARTICLE,\n        to.params.slug,\n        to.params.previousArticle\n      );\n    }\n    return next();\n  },\n  async beforeRouteLeave(to, from, next) {\n    await store.dispatch(ARTICLE_RESET_STATE);\n    next();\n  },\n  data() {\n    return {\n      tagInput: null,\n      inProgress: false,\n      errors: {}\n    };\n  },\n  computed: {\n    ...mapGetters([\"article\"])\n  },\n  methods: {\n    onPublish(slug) {\n      let action = slug ? ARTICLE_EDIT : ARTICLE_PUBLISH;\n      this.inProgress = true;\n      this.$store\n        .dispatch(action)\n        .then(({ data }) => {\n          this.inProgress = false;\n          this.$router.push({\n            name: \"article\",\n            params: { slug: data.article.slug }\n          });\n        })\n        .catch(({ response }) => {\n          this.inProgress = false;\n          this.errors = response.data.errors;\n        });\n    },\n    removeTag(tag) {\n      this.$store.dispatch(ARTICLE_EDIT_REMOVE_TAG, tag);\n    },\n    addTag(tag) {\n      this.$store.dispatch(ARTICLE_EDIT_ADD_TAG, tag);\n      this.tagInput = null;\n    }\n  }\n};\n</script>\n"]}]}